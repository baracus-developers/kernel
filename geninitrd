#!/bin/bash

if [[ ! -x /usr/bin/unsquashfs ]] ; then
  echo "you need to install the squashfs pkg"
  exit 1
fi

if [[ ! -x /sbin/depmod ]] ; then
  echo "you need to install the module-init-tools pkg"
  exit 1
fi

pushd()
{
    builtin pushd "$@" > /dev/null
    if [[ "$?" == "1" ]]; then
      echo "exiting - unable to pushd into $@"
      exit 1
    fi
}
popd()
{
    if [ -z "$@" ] ; then
      builtin popd > /dev/null
    else
      builtin popd "$@" > /dev/null
    fi
}

## Create a new initrd.baracus
##
##

[ ! -z "$1" ] && INITRD_IMG=$1 

# set the default for the vanilla - we should have a list here and a generation loop

[ -z "$INITRD_IMG" ] && INITRD_IMG=initrd.opensuse-11.3

if [[ "$INITRD_IMG" == "initrd.opensuse-11.3" ]]; then
    KERNEL="2.6.34-12-default"
elif [[ "$INITRD_IMG" == "initrd.opensuse-11.4" ]]; then
    KERNEL="3.6.36-18-default"
else
    KERNEL=""
fi

DATADIR=`pwd`/workload
DSTDIR="$DATADIR/$INITRD_IMG.dir"
BA_APPS="pxewait busybox.dban baracus.dban baracus.image baracus.mcast baracus.clone baracus.register lshw-static.B.02.15.x86 dbclient shellexec"
BIN_APPLETS="ash cp dd dmesg echo grep ls tar date mv"
USR_BIN_APPLETS="clear dwipe sort tr wc"

export KERNEL DATADIR INITRD_IMG DSTDIR BA_APPS BIN_APPLETS USR_BIN_APPLETS

if [[ ! -f "$DATADIR/$INITRD_IMG" ]] ; then
  echo "unable to find specified initrd: $DATADIR/$INITRD_IMG"
  exit 1
else
  echo "using initrd: $DATADIR/$INITRD_IMG"
fi

[[ -d $DSTDIR ]] && rm -rf $DSTDIR
mkdir -p $DSTDIR

## Extract the image
##

[[ -d $DSTDIR ]] && pushd $DSTDIR
  zcat ../$INITRD_IMG | cpio --quiet -id  
  
  ## copy-in the baracus data
  ##
  mkdir -p usr/bin/
  for i in $BA_APPS; do
        cp ../$i usr/bin/.
  done
  cp ../busybox-1.16.1.udpcast-20100130 usr/bin/busybox.udpcast

  cp ../halt sbin/.
  cp ../dropbear sbin/.
  mkdir -p log/dban
  mkdir -p usr/share/
  cp -r ../terminfo usr/share/.
  mkdir -p etc/dropbear
  cp ../dropbear_rsa_host_key etc/dropbear
  chown root:root etc/dropbear/dropbear_rsa_host_key
  cp ../shells etc/.
  
  pushd usr
    ln -s . i386-linux-uclibc
  popd
  
  pushd sbin
    ln -s halt reboot
  popd
  
  pushd bin
    ln -s ../usr/bin/busybox.udpcast udp-receiver
    ln -s ../usr/bin/busybox.udpcast udp-sender

    for i in $BIN_APPLETS; do
        ln -s ../usr/bin/busybox.dban $i
    done
  popd
  
  pushd usr/bin
    for i in $USR_BIN_APPLETS; do
        ln -s ../../usr/bin/busybox.dban $i
    done
  popd
  
  pushd etc
    echo "root:Wvg7eFFQQVjbo:14869:0:99999:7:::" > shadow
    echo "root:x:0:0:root:/root:/usr/bin/shellexec" > tmppasswd
    grep -v "root" passwd >> tmppasswd
    mv tmppasswd passwd
  popd

  # modern non-xen kernels have fs pkg'd in parts
  if [[ -d parts ]] ; then
    pushd parts
      unsquashfs 00_lib &> /dev/null
      cp ../../$INITRD_IMG-modules/ipmi* squashfs-root/lib/modules/$KERNEL/initrd/
    
      export KPATH=`pwd`/squashfs-root         # var is location sensitive KPATH must be here
      pushd squashfs-root/lib/modules/$KERNEL
        depmod -a --basedir $KPATH $KERNEL
      popd
      rm 00_lib
      mksquashfs squashfs-root/ 00_lib &> /dev/null
      rm -Rf squashfs-root/
    popd
  else
    # when we need we'll modifiy so we can add modules to xen initrd here too
    echo "not working with parts dir - hope this is a xen initrd or it won't have ipmi"
  fi
  
  ## create the new image
  ##
  [ -f ../$INITRD_IMG.baracus ] && rm ../$INITRD_IMG.baracus
  find . | cpio --quiet --create --format='newc' > ../$INITRD_IMG.baracus
popd

pushd $DATADIR
  gzip $INITRD_IMG.baracus
  mv $INITRD_IMG.baracus.gz $INITRD_IMG.baracus
popd

[[ -d $DSTDIR ]] && rm -rf $DSTDIR

## complete
##
echo "completed: $DATADIR/$INITRD_IMG.baracus"
