#!/bin/bash

trap 'keeper' 2
trap 'keeper' 20

# weird that we don't have these in all our shells ... extract

export baimagesrc=`sed -re 's/^.* baimagesrc="?([^ "]*).*$/\1/' /proc/cmdline`
export baimagedst=`sed -re 's/^.* baimagedst="?([^ "]*).*$/\1/' /proc/cmdline`
export baracus=`sed -re 's/^.* baracus=([^ ]*).*$/\1/' /proc/cmdline`
export macaddr=`sed -re 's/^.* mac=([^ ]*).*$/\1/' /proc/cmdline`

FILE=/tmp/clone.log

if [[ ! -f /tmp/flag ]]; then
    echo "" > /tmp/flag
    echo -ne "Getting network settings via dhcp\n"
    /sbin/dhcpcd -t60 eth0
    mkdir /dev/pts
    mount -t devpts devpts /dev/pts
    sleep 5
    /sbin/dropbear -p 0.0.0.0:22 -r /etc/dropbear/dropbear_rsa_host_key
    echo "baracus.clone" > /tmp/sshshell

    # notify the baracus server the node is clone running/ready
    PARAMS="mac=$macaddr"
    URL="http://$baracus/ba/cloner?$PARAMS"
    /usr/bin/curl $URL
fi

# get the IP we were DHCP'd

export ipaddr=`/sbin/ifconfig eth0 | grep "inet addr" |sed -re 's/^.* inet addr:([^ ]*).*$/\1/'`
export chkmac=`/sbin/ifconfig eth0 | grep "HWaddr" |sed -re 's/^.* HWaddr ([^ ]*).*$/\1/'`

keeper()
{
    return
}

menu()
{
    echo 
    echo "Local MAC: $macaddr"
    if [[ "$macaddr" != "$chkmac" ]]; then
        echo "Oddly eth0 MAC is different: $chkmac"
    fi
    echo "Local IP:  $ipaddr"
    echo "Baracus Host: $baracus"
    echo "Specified Disk: $baimagesrc"
    echo "Specified Image Name: $baimagedst"
    echo "-------------------------------------"
    echo "| Baracus command shell             |"
    echo "|                                   |"
    if [[ -f $FILE ]]; then
        echo "| 1 - clone of system in progress   |"
    else
        echo "| 1 - clone system                  |"
    fi
    echo "| 2 - reboot                        |"
    echo "| 3 - shutdown                      |"
    echo "| 4 - disconnect                    |"
    echo "-------------------------------------"
}

clone()
{
    echo "cloning $baimagesrc ..."
    STATUS="pass"

    if [[ -f $FILE ]]; then
        # barf as someone is trying to kick off a 2nd clone while one is going
        echo "A clone of $baimagesrc to $baimagedst is already in progress."
        return
    fi


    ## Create FILE
    echo "Starting..." > $FILE
    date >> $FILE
    echo "golden host: $macaddr" >> $FILE
    echo "raw disk: $baimagesrc" >> $FILE
    echo "image name:  $baimagedst" >> $FILE


    IMAGE=http://$baracus/var/spool/baracus/images/$baimagedst.gz

    /usr/bin/curl --silent --head $IMAGE > /tmp/curl.head
    /bin/grep -i "Not Found" /tmp/curl.head >& /dev/null
    if [[ $? -ne 0 ]]; then
        echo "Image file target found - refusing to overwrite: $IMAGE" >> $FILE
        /bin/cat /tmp/curl.head >> $FILE
        STATUS="fail"
    fi

    /usr/sbin/hwinfo --disk --short > /tmp/hwinfo.disk
    /bin/grep $baimagesrc /tmp/hwinfo.disk >& /dev/null
    if [[ $? -ne 0 ]]; then
      echo -ne "source disk device not found: $baimagesrc" >> $FILE
      /bin/cat /tmp/hwinfo.disk >> $FILE
      STATUS="fail"
    fi

    if [[ "$STATUS" == "pass" ]]; then
       /bin/dd if=$baimagesrc | /bin/gzip | /usr/bin/dbclient -i /.ssh/id_rsa.db baracus@$baracus "gzip -d | sparsefile > images/$baimagedst && gzip images/$baimagedst"
      if [[ $? -ne 0 ]]; then
        echo "failure - exit code $? - msg $!" >> $FILE
        STATUS="fail"
      else
        echo "Successfully uploaded cloned image" >> $FILE
      fi
    fi

    COOKIE2="mac=$macaddr;status=$STATUS"
    echo "/usr/bin/curl -H 'Content-Type: application/octet-stream' -b \"$COOKIE2\" -T $FILE http://$baracus/ba/clonelog"
    /usr/bin/curl -H 'Content-Type: application/octet-stream' -b $COOKIE2 -T $FILE http://$baracus/ba/clonelog

    sleep 5
    echo "rebooting..."
    /sbin/reboot -f
}

clear
if [[ $autoclone -eq 1 ]]; then
    clone
else
    menu
fi

while :
do
  echo -ne "> "
  read selection
  case $selection in
  1)
    clone
    menu
  ;;
  2)
    echo "rebooting..."
    /sbin/reboot -f
  ;;
  3)
    echo "shutting down..."
    /sbin/halt -f -p
  ;;
  4)
    if [[ x"$TERM" != x"linux" ]]
    then
      echo "disconnecting..."
      exit
    else
      clear
      menu
    fi
  ;;
  8675309)
    /bin/bash
    menu
  ;;
  *)
    echo "invalid selection"
  ;;
  esac
done

